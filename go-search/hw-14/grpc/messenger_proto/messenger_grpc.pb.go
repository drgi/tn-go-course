// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: messenger.proto

package messenger_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessangerClient is the client API for Messanger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessangerClient interface {
	Messages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Messanger_MessagesClient, error)
	Send(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Empty, error)
}

type messangerClient struct {
	cc grpc.ClientConnInterface
}

func NewMessangerClient(cc grpc.ClientConnInterface) MessangerClient {
	return &messangerClient{cc}
}

func (c *messangerClient) Messages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Messanger_MessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Messanger_ServiceDesc.Streams[0], "/protobuf.Messanger/Messages", opts...)
	if err != nil {
		return nil, err
	}
	x := &messangerMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Messanger_MessagesClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type messangerMessagesClient struct {
	grpc.ClientStream
}

func (x *messangerMessagesClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messangerClient) Send(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protobuf.Messanger/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessangerServer is the server API for Messanger service.
// All implementations must embed UnimplementedMessangerServer
// for forward compatibility
type MessangerServer interface {
	Messages(*Empty, Messanger_MessagesServer) error
	Send(context.Context, *Message) (*Empty, error)
	mustEmbedUnimplementedMessangerServer()
}

// UnimplementedMessangerServer must be embedded to have forward compatible implementations.
type UnimplementedMessangerServer struct {
}

func (UnimplementedMessangerServer) Messages(*Empty, Messanger_MessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method Messages not implemented")
}
func (UnimplementedMessangerServer) Send(context.Context, *Message) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedMessangerServer) mustEmbedUnimplementedMessangerServer() {}

// UnsafeMessangerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessangerServer will
// result in compilation errors.
type UnsafeMessangerServer interface {
	mustEmbedUnimplementedMessangerServer()
}

func RegisterMessangerServer(s grpc.ServiceRegistrar, srv MessangerServer) {
	s.RegisterService(&Messanger_ServiceDesc, srv)
}

func _Messanger_Messages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessangerServer).Messages(m, &messangerMessagesServer{stream})
}

type Messanger_MessagesServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type messangerMessagesServer struct {
	grpc.ServerStream
}

func (x *messangerMessagesServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _Messanger_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessangerServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Messanger/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessangerServer).Send(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

// Messanger_ServiceDesc is the grpc.ServiceDesc for Messanger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Messanger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Messanger",
	HandlerType: (*MessangerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Messanger_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Messages",
			Handler:       _Messanger_Messages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "messenger.proto",
}
